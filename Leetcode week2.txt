Week:-2
Problem 1:- Middle of the Linked List
Input: [1,2,3,4,5]
Output: Node 3 from this list (Serialization: [3,4,5])
Input: [1,2,3,4,5,6]
Output: Node 4 from this list (Serialization: [4,5,6])
Since the list has two middle nodes with values 3 and 4, we return the second one.
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode mid = head;
        ListNode tail = head;
        while(tail !=null && tail.next !=null){
            mid = mid.next;
            tail = tail.next.next;
        }
        return mid;
    }
}
=================================================================================
Problem 2:- Backspace string compare
Input: S = "ab#c", T = "ad#c"
Output: true
Explanation: Both S and T become "ac".
-------------------------------
Input: S = "ab##", T = "c#d#"
Output: true
Explanation: Both S and T become "".
--------------------------------
Input: S = "a##c", T = "#a#c"
Output: true
Explanation: Both S and T become "c".
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
class Solution {
    public boolean backspaceCompare(String S, String T) {
        
        List<Character> a = new ArrayList<Character>();
        List<Character> b = new ArrayList<Character>();
        
        for(int i=0; i<S.length(); i++){
            if(S.charAt(i)!='#'){
                a.add(S.charAt(i));
            } else{
                if(a.size()!=0){
                    a.remove(a.size()-1);
                }
            }
        }
        for(int j=0; j<T.length(); j++){
            if(T.charAt(j)!='#'){
                 b.add(T.charAt(j));
            }
            else{
                 if(b.size()!=0){
                    b.remove(b.size()-1);
                }
            }
        }
        return a.equals(b);
    }
}
==============================================

Program 3:- Min Stack
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
class MinStack {
        
    /** initialize your data structure here. */
     Stack<Integer> stack;
    Stack<Integer> mis;
    public MinStack() {
        
      stack = new Stack<Integer>();
  mis = new Stack<Integer>();
    }
    
    public void push(int x) {
         stack.push(x);
        if (mis.isEmpty() || x < mis.peek()){
            mis.push(x);
        } else {
            mis.push(mis.peek());
        }
    }
    
    public void pop() {
        
        stack.pop();
         mis.pop();
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
        return mis.peek();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
==================================================


Program 4:-Diameter of Binary tree
Example:
Given a binary tree
          1
         / \
        2   3
       / \     
      4   5    
Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].

Note: The length of path between two nodes is represented by the number of edges between them.
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
class Solution {
    int max =0; 
    public int diameterOfBinaryTree(TreeNode root) {
         maxDepth(root);
        return max;
    }
    private int maxDepth(TreeNode root) {
        if (root == null) return 0;

        int left = maxDepth(root.left);
        int right = maxDepth(root.right);

        max = Math.max(max, left + right);

        return Math.max(left, right) + 1;
    }
}
==============================================

Program 5:- Last stone weight
Input: [2,7,4,1,8,1]
Output: 1
Explanation: 
We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,
we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,
we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,
we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of last stone.
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
import java.util.*;
public class HelloWorld{
 public static int lastStoneWeight(int[] stones) {
     PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
     for(int stone:stones){
         pq.add(stone);
     }
     while(pq.size()>1){
         pq.add(pq.poll()-pq.poll());
     }
     return pq.peek();
 }
     public static void main(String []args){
         int[] arr = {2,7,4,8,1,1};
        int result = lastStoneWeight(arr);
        System.out.println(result);
     }
}
===========================================

Program 6:- Contiguous Array
Input: [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
class Solution {
    public int findMaxLength(int[] nums) {
        HashMap<Integer, Integer> counts = new HashMap();
        counts.put(0, -1);
        int max_len =0;
        int count =0;
        for (int i =0; i<nums.length; i++){
            if(nums[i]== 0){
                count += -1;
            }else {
                count += 1;
            }
        
        if(counts.containsKey(count)){
           max_len = Math.max(max_len, i-counts.get(count));       
        } else 
        { counts.put(count, i);  
        }
        }
        return max_len;
    }
}
================================================

Program 7:- Perform String Shifts
Input: s = "abc", shift = [[0,1],[1,2]]
Output: "cab"
Explanation: 
[0,1] means shift to left by 1. "abc" -> "bca"
[1,2] means shift to right by 2. "bca" -> "cab"
Input: s = "abcdefg", shift = [[1,1],[1,1],[0,2],[1,3]]
Output: "efgabcd"
Explanation:  
[1,1] means shift to right by 1. "abcdefg" -> "gabcdef"
[1,1] means shift to right by 1. "gabcdef" -> "fgabcde"
[0,2] means shift to left by 2. "fgabcde" -> "abcdefg"
[1,3] means shift to right by 3. "abcdefg" -> "efgabcd"
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
class Solution {
    public String stringShift(String s, int[][] shift) {
         int len =s.length();
        for (int [] value : shift){
            if(value[0] == 0){
                s = leftShift(s, value[1]%len);
            } else{
                 s = rightShift(s, value[1]%len);   
            }  
        }
            return s;
        
    } 
           public static String rightShift(String s, int num){
               return s.substring(s.length()-num)+s.substring(0, s.length()-num);
           }
        public static String leftShift(String s, int num){
            return s.substring(num)+s.substring(0, num);
        }
    
}
===============================================