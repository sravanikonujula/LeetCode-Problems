Program 1:- Product of Array Except Self
Example:
Input:  [1,2,3,4]
Output: [24,12,8,6]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] left = new int[n] ;
         int[] right = new int[n] ;
         int[] result = new int[n] ;
        left[0]=1;
        for(int i=1; i<n; i++)
        {
            left[i] = left[i-1]*nums[i-1];
        }
        right[n-1] =1;
        for(int i=n-2; i>=0; i--) 
        {
            right[i] = right[i+1]* nums[i+1];
        }
        for(int i=0; i<n; i++) {
            result[i]= left[i] * right[i];
        }
        return result;
    } 
}
==============================================

Program 2:- Valid Parenthesis String
Example:
Input: "(*))"
Output: True
Input: "(*)"
Output: True
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
class Solution {
    public boolean checkValidString(String s) {
      if(s.length()%2 != 0) return false;
        //char[] arr = s.toCharArray();
        Stack<Character> stack = new Stack<Character>();
        for(char c : s.toCharArray()){
            if(c=='(' ||c=='[' ||c=='{'){
                stack.push(c);
            } else if(c==')' && !stack.isEmpty() && stack.peek() == '(' ){ 
                stack.pop();
            } else if(c==']' && !stack.isEmpty() && stack.peek() == '[' ){
                stack.pop();
            } else if(c=='}' && !stack.isEmpty() && stack.peek() == '{' ){ 
                stack.pop();
            }
        }
        return stack.isEmpty();
    }
} 
&&&&&&&&&&&&&&
class Solution {
    public boolean checkValidString(String s) {
        return isValid(s, 0, 0); 
    }
    
        private boolean isValid(String s, int index, int ans){
        if(index >= s.length())  return ans == 0; 

        char ch = s.charAt(index); 
        if(ch == '(') ans++;
        if(ch == ')'){
            if(ans<=0) return false;
            else ans--; 
        } 
        
        if(ch =='*'){
            return isValid(s, index+1, ans-1) 
                ||isValid(s, index+1, ans+1)
                ||isValid(s, index+1, ans);
        }
        
        return isValid(s, index+1, ans);
    }    
}
==============================================

Program 1:- No of Islands
Example:
Input:
11110
11010
11000
00000

Output: 1
Input:
11000
11000
00100
00011

Output: 3
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
class Solution {
    public int numIslands(char[][] grid) {
        if(grid == null || grid.length == 0){
            return 0;
        }
        int numIslands =0;
        for (int i=0; i<grid.length; i++){
            for(int j=0; j<grid[i].length; j++){
                if(grid[i][j] == '1'){
                   numIslands += dfs(grid,i,j);
                }
            }
        }
        return numIslands;
    }
    public int dfs(char[][] grid, int i, int j){
        if(i<0 || i>=grid.length || j<0 || j>=grid[i].length || grid[i][j] =='0' ){
            return 0;
        }
        grid[i][j] = '0';
        dfs(grid, i+1, j);
        dfs(grid, i-1, j);
        dfs(grid, i, j+1);
        dfs(grid, i, j-1);
        return 1;
    }
}
==============================================

Program 4:- Minimum Path Sum
Example:
Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
class Solution {
    public int minPathSum(int[][] grid) {  
        if(grid==null||grid.length==0){
            return 0;
        }
        int m = grid.length;
        int n = grid[0].length;
        int[][] mins = new int[m][n];
        mins[0][0] = grid[0][0];
        for (int i = 1; i < m; i ++){
            mins[i][0] = mins[i-1][0] + grid[i][0];
        }
        for (int j = 1; j < n; j ++){
            mins[0][j] = mins[0][j-1] + grid[0][j];
        }
        for (int i = 1; i < m ; i ++){
            for (int j = 1; j < n; j ++){
                 mins[i][j] = Math.min(mins[i-1][j], mins[i][j-1]) + grid[i][j];
            }
        }
        return mins[m-1][n-1];
    }
}
==============================================

Program 5:- Search in Rotated Sorted Array
Example:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
class Solution {
    public int search(int[] nums, int target) {
        if(nums.length == 0 || nums == null){
            return -1;
        }
       int left = 0;
       int right= nums.length-1;
        while(left<=right){
        int mid = left + (right-left)/2;
        if(target==nums[mid])
            return mid;
 
        if(nums[left]<=nums[mid]){
            if(nums[left]<=target&& target<nums[mid]){
                right=mid-1;
            }else{
                left=mid+1;
            }
        }else{
            if(nums[mid]<target&& target<=nums[right]){
                left=mid+1;
            }else{
                right=mid-1;
            }
        }    
    }
 
    return -1;
    }
}
==============================================

Program 6:-Construct Binary Search Tree from Preorder Traversal
Example:
Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
class Solution
{
	int rootIndex = 0;
    
	public TreeNode bstFromPreorder(int[] preorder)
	{
       return build_Tree(preorder, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }

    private TreeNode build_Tree(int[] preorder, int l, int r)
	{
        if(rootIndex == preorder.length || preorder[rootIndex] < l || preorder[rootIndex] > r)
		{
			return null;
		}
		else
		{
			TreeNode root = new TreeNode(preorder[rootIndex++]);
			root.left = build_Tree(preorder, l, root.val);
			root.right = build_Tree(preorder, root.val, r);
			return root;
		}
    }
}
==============================================

Program 7:-Leftmost Column with at Least a One
Example:
Input: mat = [[0,0],[0,1]]
Output: 1
Input: mat = [[0,0,0,1],[0,0,1,1],[0,1,1,1]]
Output: 1
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
class Solution {
    public int leftMostColumnWithOne(BinaryMatrix binaryMatrix) {
        List<Integer> dimension=binaryMatrix.dimensions();
        int n=dimension.get(0);
        int m=dimension.get(1);
       
        int i=0,j=m-1,leftMostOne=-1;
        
        while(i<n && j>=0)
        {
            int result=binaryMatrix.get(i,j);
            if(result==0)
              i++;
            else{
                leftMostOne=j;
                j--;
             }
        } 
        return leftMostOne;
    }
}
==============================================
