Program for knowledge:-
String Sorting
@@@@@@@@@@@@@@@@@
import java.util.*;
public class Sorting
{
public static String[] wordArray(String[] strs) 
    {
       Arrays.sort(strs);
       System.out.println("The sorted  String Array :");
       for(int i=0; i<strs.length; i++)
       {
          System.out.println( strs[i]);
       }
       return strs;
    }

     public static void main(String []args){
        String[] strs = new String[]{"van","den","fog","apple","bat"};
        strs = wordArray(strs);
     }
}
*****output************
The sorted  String Array :
apple
bat
den
fog
van
==============================

Prgm2:
import java.util.*;
public class Sorting
{
public static String[] wordArray(String[] strs) 
    {
       Arrays.sort(strs);
       System.out.println("The sorted  String Array :");
       for(int i=0; i<strs.length; i++)
       {
          System.out.println( strs[i]);
       }
       return strs;
    }
public static String sortString(String inputString){
        char tempArray[] = inputString.toCharArray(); 
        Arrays.sort(tempArray); 
        return new String(tempArray); 
}
}
     public static void main(String []args){
        String[] strs = new String[]{"van","den","fog","apple","bat"};
        strs = wordArray(strs);
        System.out.println("The required Word Sorting :");
        String inputString = "sravani"; 
        String outputString = sortString(inputString); 
          
        System.out.println("Input String : " + inputString); 
        System.out.println("Output String : " + outputString); 
     }
}
*****output************
The sorted  String Array :
apple
bat
den
fog
van
The required Word Sorting :
Input String : sravani
Output String : aainrsv
==============================
Prgm: import java.util.*;
public class Sorting
{
    public static String[] wordSort(String[] wrds)
    {
       System.out.println("The individual word sorted String Array :");
       for(String t: wrds)
       {
           String s = shuffle(t);
           System.out.println(s);
       }
       return wrds;
    }
    private static String shuffle(String s)
    {
        char tempWord[] = s.toCharArray(); 
        Arrays.sort(tempWord); 
        return new String(tempWord); 
    }
    
     public static void main(String []args)
     {
        String[] wrds = new String[]{"van","den","fog","apple","bat"};
        wrds = wordSort(wrds);
     }
}
*****output************
The individual word sorted String Array :
anv
den
fgo
aelpp
abt
==============================

Program 1:- Single number
Example:::
Input: [4,1,2,1,2]
Output: 4
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
public class Singlenum {

public static int number(int[] arr)
{
int ans = 0;
for(int i = 1;i<arr.length;i++)
ans = ans ^ arr[i];
return ans;
}
public static void main(String[] args) {

int[] arr = new int[]{2,2,3,7,2,3,8,9,9,8};
System.out.println("single number is "+ number(arr));
}

}
===================================================================================
Program 2:- Happy Number
Example:::
Input: 19
Output: true
Explanation: 
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
1 + 0 + 0 = 1
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
public class HelloWorld{
   
   public static boolean isHappy(int n)
   {
       Set<Integer> set = new HashSet<>();
       while( n!=1)
       {
           int current = n;
           int sum=0;
           while (current!=0)
           {
             sum += (current%10) * (current%10);
             current /= 10;
           }
           if(set.contains(sum)){
               return false;
           }      
   set.add(sum);
   n=sum;
       }
return true;
}


    public static void main(String []args){
       System.out.println("Here is the happy number   " + isHappy(19) );
    }
}
==============================================================================

Program 3:- Maximum Sub Array
Example:::
Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
@@@@@@@@@@@@@@@@@@
class Solution {
   public static int maxSubArray(int[] nums) {
      int sum = nums[0];
       int max = nums[0];
       for (int i=1; i<nums.length; i++){
           int curr = nums[i];
           sum=Math.max(sum+curr, curr);
           max=Math.max(max,sum);
       }
       return max;
   }
   public static void main(String args[]){
       int[] nums = new int[]{-2,1,-3,4,-1,2,1,-5,4};
       System.out.println("Here is max sum :" + maxSubArray(nums));
   }
}
==============================================================================


Program 4:- Move Zeros
Example:::
Input: [0,1,0,3,12]
Output: [1,3,12,0,0]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
class Solution {
    public void moveZeroes(int[] nums) {
      int index = 0;
        for (int i=0; i<nums.length; i++ )
        {
            if(nums[i]!=0)
            {
                nums[index++] = nums[i];
            }
        }
      
        for (int i=index; i<nums.length; i++ )
        {
            nums[i]=0;
        }
    }
    public static void main(String []args){
        int[] nums = new int[]{0,1,0,3,12};
        System.out.println("Modified Array :" + nums );
     }
}
======================================================================================================
Program 5:- Best Time to buy and sell
Example:::
Input: [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
class Solution {
    public int maxProfit(int[] prices) {
        if(prices == null || prices.length ==0){
            return 0;
        }
        int profit = 0;
        for (int i=0; i<prices.length-1; i++){
            if(prices[i+1]>prices[i]){
                profit += prices[i+1]-prices[i];
            }
        }
        return profit;
    }
}
===========================================================================
Program 6:- Group Anagrams
Example:::
Input: ["eat", "tea", "tan", "ate", "nat", "bat"],
Output:
[
  ["ate","eat","tea"],
  ["nat","tan"],
  ["bat"]
]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
      
        List<List<String>> groupedAnagrams = new ArrayList<>();
        Map <String, List<String>> m = new HashMap<>();
        for(String s: strs)
        {
              char tempWord[] = s.toCharArray(); 
        Arrays.sort(tempWord); 
        String sorted = new String(tempWord); 
            if(!m.containsKey(sorted))
            {
                m.put(sorted,new ArrayList<>()); 
            }
        m.get(sorted).add(s);
        }
        groupedAnagrams.addAll(m.values());
        return groupedAnagrams;

}
}
==============================================================================
Program 7:- Counting Elements
Given an integer array arr, count element x such that x + 1 is also in arr.
Example:::
Input: arr = [1,3,2,3,5,0]
Output: 3
Input: arr = [1,1,2,2]
Output: 2
Explanation: Two 1s are counted cause 2 is in arr.
Explanation: 0, 1 and 2 are counted cause 1, 2 and 3 are in arr.
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
class Solution {
    public int countElements(int[] arr) {
        
        Set<Integer> s = new HashSet<>();
        for (int val: arr){
            s.add(val);
        }
        int count = 0;
        for(int i=0; i<arr.length; i++){
            if(s.contains(arr[i]+1)){
                count++;
            }
        }
        return count;
    }
      public static void main(String []args){
        int[] arr = new int[]{1,2,1,2};
        System.out.println("Modified Array :" + arr );
     }
}
==============================================================================